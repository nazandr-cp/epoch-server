services:
  epoch-server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: epoch-server
    ports:
      - "8088:8080"
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs
    # depends_on:
    #   - postgres
    #   - redis
    restart: unless-stopped
    networks:
      - epoch-network
    # healthcheck:
    #   test:
    #     [
    #       "CMD",
    #       "wget",
    #       "--no-verbose",
    #       "--tries=1",
    #       "--spider",
    #       "http://localhost:8080/health",
    #     ]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 40s

#   postgres:
#     image: postgres:15-alpine
#     container_name: epoch-postgres
#     environment:
#       - POSTGRES_DB=${POSTGRES_DB:-epoch_db}
#       - POSTGRES_USER=${POSTGRES_USER:-epoch_user}
#       - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-epoch_password}
#     volumes:
#       - postgres_data:/var/lib/postgresql/data
#       - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
#     ports:
#       - "5432:5432"
#     restart: unless-stopped
#     networks:
#       - epoch-network
#     healthcheck:
#       test:
#         [
#           "CMD-SHELL",
#           "pg_isready -U ${POSTGRES_USER:-epoch_user} -d ${POSTGRES_DB:-epoch_db}",
#         ]
#       interval: 10s
#       timeout: 5s
#       retries: 5

#   redis:
#     image: redis:7-alpine
#     container_name: epoch-redis
#     command:
#       [
#         "redis-server",
#         "--appendonly",
#         "yes",
#         "--requirepass",
#         "${REDIS_PASSWORD:-redis_password}",
#       ]
#     volumes:
#       - redis_data:/data
#     ports:
#       - "6379:6379"
#     restart: unless-stopped
#     networks:
#       - epoch-network
#     healthcheck:
#       test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
#       interval: 10s
#       timeout: 3s
#       retries: 5

#   # Optional: Graph Node for local development
#   graph-node:
#     image: graphprotocol/graph-node:latest
#     container_name: epoch-graph-node
#     ports:
#       - "8000:8000"
#       - "8001:8001"
#       - "8020:8020"
#       - "8030:8030"
#       - "8040:8040"
#     depends_on:
#       - postgres
#     environment:
#       - postgres_host=postgres
#       - postgres_user=${POSTGRES_USER:-epoch_user}
#       - postgres_pass=${POSTGRES_PASSWORD:-epoch_password}
#       - postgres_db=${POSTGRES_DB:-epoch_db}
#       - ipfs=https://ipfs.network.thegraph.com
#       - ethereum=mainnet:${ETHEREUM_RPC_URL:-http://localhost:8545}
#       - GRAPH_NODE_CONFIG=/etc/graph-node/config.toml
#       - GRAPH_LOG=info
#     volumes:
#       - ./graph-node-config.toml:/etc/graph-node/config.toml:ro
#     restart: unless-stopped
#     networks:
#       - epoch-network
#     profiles:
#       - development

#   # Optional: Local Ethereum node for development
#   hardhat-node:
#     image: node:18-alpine
#     container_name: epoch-hardhat-node
#     working_dir: /app
#     command: >
#       sh -c "
#         npm install -g hardhat &&
#         npx hardhat node --hostname 0.0.0.0 --port 8545
#       "
#     ports:
#       - "8545:8545"
#     restart: unless-stopped
#     networks:
#       - epoch-network
#     profiles:
#       - development

# volumes:
#   postgres_data:
#     driver: local
#   redis_data:
#     driver: local

networks:
  epoch-network:
    driver: bridge
